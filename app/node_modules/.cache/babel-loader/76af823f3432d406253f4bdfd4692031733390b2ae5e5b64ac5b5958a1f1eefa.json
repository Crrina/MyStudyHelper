{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crina\\\\Documents\\\\projects1\\\\webproject\\\\project\\\\app\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport TypingAnimation from \"./TypingAnimation\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8080\";\nexport default function ChatBox() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [chatLog, setChatLog] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  let accessToken = localStorage.getItem('accessToken');\n  const handleSend = async event => {\n    event.preventDefault();\n    setChatLog(prevChatLog => [...prevChatLog, {\n      type: 'user',\n      message: input,\n      saved: false\n    }]);\n    const rest_api = \"http://localhost:8080/bot/chat?prompt=\" + input;\n    setIsLoading(true);\n    try {\n      //my model is handled at the backend, as well as the key for security reasons\n      const response = await fetch(rest_api, {\n        method: 'GET',\n        headers: {\n          \"Content-Type\": \"application/text\"\n        }\n      });\n      const responseText = await response.text();\n      setChatLog(prevChatLog => [...prevChatLog, {\n        type: \"bot\",\n        message: responseText\n      }]);\n      setIsLoading(false);\n      setInput('');\n\n      // setAnswer(textResponse);\n    } catch (error) {\n      setIsLoading(false);\n      console.error(\"Fetching error: \", error);\n    }\n  };\n\n  //<!--the button has to be in the form, for onSubmit to be triggered by the button\n  const handleSaveMessage = async (message, index, event) => {\n    event.preventDefault();\n    try {\n      const response = await axios.post(API_URL + \"/note\", {\n        content: message\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}` // Include the token in the header\n        }\n      });\n      if (response.status === 200) {\n        setChatLog(prevChatLog => {\n          const newChatLog = [...prevChatLog];\n          newChatLog[index] = {\n            ...newChatLog[index],\n            saved: true\n          };\n          return newChatLog;\n        });\n      }\n    } catch (err) {\n      if (!(err !== null && err !== void 0 && err.response)) {\n        console.log(\"No Server Response\");\n      } else if ((err === null || err === void 0 ? void 0 : err.response.status) === 401) {\n        console.log(\"Error message: \", err.response.data);\n      } else if ((err === null || err === void 0 ? void 0 : err.response.status) === 403) {\n        console.log(\"Bad request\");\n      } else {\n        console.log(\"Failed to access source\");\n      }\n    }\n  };\n\n  //or the button can be outside the form, but then instead of having onSubmit={} we would have at the button onClick={handleSend}-->\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [chatLog.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.type}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-bubble\",\n          children: message.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), message.type === 'bot' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-chat-convo\",\n          onClick: event => handleSaveMessage(message.message, index, event),\n          disabled: message.saved // Disable the button if the message is saved\n          ,\n          children: [message.saved ? 'Saved' : 'Save', \" // Change button text based on saved status\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-log\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animation-log\",\n          children: /*#__PURE__*/_jsxDEV(TypingAnimation, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)\n      }, chatLog.length, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSend,\n      className: \"chat-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"chat-input\",\n        placeholder: \"Type your message...\",\n        value: input,\n        onChange: e => setInput(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatBox, \"LsdVBFFpI2jgdX6Ms5uIt2BZnJY=\");\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["useState","TypingAnimation","axios","jsxDEV","_jsxDEV","API_URL","ChatBox","_s","input","setInput","answer","setAnswer","chatLog","setChatLog","isLoading","setIsLoading","accessToken","localStorage","getItem","handleSend","event","preventDefault","prevChatLog","type","message","saved","rest_api","response","fetch","method","headers","responseText","text","error","console","handleSaveMessage","index","post","content","status","newChatLog","err","log","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","disabled","length","onSubmit","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/crina/Documents/projects1/webproject/project/app/src/components/ChatBox.js"],"sourcesContent":["import {useState} from \"react\";\r\nimport TypingAnimation from \"./TypingAnimation\";\r\nimport axios from \"axios\";\r\nconst API_URL = \"http://localhost:8080\"\r\n\r\n\r\n\r\n\r\nexport default function ChatBox(){\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [chatLog, setChatLog] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    let accessToken = localStorage.getItem('accessToken');\r\n\r\n\r\n    const handleSend = async (event) => {\r\n        event.preventDefault();\r\n        setChatLog((prevChatLog) => [...prevChatLog, {type: 'user', message: input, saved: false}]);\r\n        const rest_api = \"http://localhost:8080/bot/chat?prompt=\" + input;\r\n        setIsLoading(true);\r\n        try {   //my model is handled at the backend, as well as the key for security reasons\r\n            const response = await fetch(rest_api, {\r\n                method: 'GET',\r\n                headers: {\"Content-Type\": \"application/text\"},\r\n            });\r\n            const responseText = await response.text()\r\n            setChatLog((prevChatLog) => [...prevChatLog, {type: \"bot\", message: responseText}])\r\n            setIsLoading(false);\r\n            setInput('');\r\n\r\n            // setAnswer(textResponse);\r\n        } catch (error) {\r\n            setIsLoading(false)\r\n            console.error(\"Fetching error: \", error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    //<!--the button has to be in the form, for onSubmit to be triggered by the button\r\n    const handleSaveMessage = async (message,index, event)=> {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await axios.post(API_URL + \"/note\", {\r\n                content: message\r\n            }, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${accessToken}` // Include the token in the header\r\n                }\r\n            });\r\n            if (response.status === 200 ) {\r\n                setChatLog(prevChatLog => {\r\n                    const newChatLog = [...prevChatLog];\r\n                    newChatLog[index] = { ...newChatLog[index], saved: true };\r\n                    return newChatLog;\r\n                });\r\n            }\r\n        }catch (err){\r\n            if(!err?.response){\r\n                console.log(\"No Server Response\");\r\n            }else if(err?.response.status === 401){\r\n                console.log(\"Error message: \", err.response.data);\r\n            }else if(err?.response.status === 403){\r\n                console.log(\"Bad request\");\r\n            }else{\r\n                console.log(\"Failed to access source\")\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //or the button can be outside the form, but then instead of having onSubmit={} we would have at the button onClick={handleSend}-->\r\n    return (\r\n        <div className=\"container-chat\">\r\n            <header className=\"chat-header\">\r\n                ChatGPT\r\n            </header>\r\n            <div className=\"chat-messages\">\r\n                {chatLog.map((message, index) => (\r\n                    <div key={index} className={`message ${message.type}`}>\r\n                        <div className=\"message-bubble\">\r\n                            {message.message}\r\n                        </div>\r\n                        {message.type === 'bot' && (\r\n                            <button\r\n                                className=\"save-chat-convo\"\r\n                                onClick={(event) => handleSaveMessage(message.message, index, event)}\r\n                                disabled={message.saved} // Disable the button if the message is saved\r\n                            >\r\n                                {message.saved ? 'Saved' : 'Save'} // Change button text based on saved status\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n\r\n                {\r\n                    isLoading && <div key={chatLog.length} className=\"typing-log\">\r\n                    <div className=\"animation-log\">\r\n                        <TypingAnimation/>\r\n                    </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <form onSubmit={handleSend} className=\"chat-input-area\">\r\n                <input\r\n                    className=\"chat-input\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}