{"ast":null,"code":"//const OpenAI = require('openai');\nconst {\n  OpenAIApi,\n  Configuration\n} = require('openai');\nconst configuration = new Configuration({\n  apiKey: \"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\"\n});\nconst openai = new OpenAIApi(configuration);\n//const openai = new OpenAI({apiKey: \"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\", dangerouslyAllowBrowser:true});\n\n//sends a request to openAi server\n//receive the response and extract it.\nexport async function sendMessageToOpenAI(message) {\n  try {\n    const response = await openai.createCompletion({\n      model: \"text-davinci-003\",\n      prompt: message,\n      max_tokens: 256,\n      top_p: 1,\n      frequency_penalty: 0,\n      presence_penalty: 0\n    });\n    return response.data.choices[0].text; //extracting only the text\n  } catch (error) {\n    console.log(\"Error in SendMessageToOpenAi: \", error);\n    return null;\n  }\n}","map":{"version":3,"names":["OpenAIApi","Configuration","require","configuration","apiKey","openai","sendMessageToOpenAI","message","response","createCompletion","model","prompt","max_tokens","top_p","frequency_penalty","presence_penalty","data","choices","text","error","console","log"],"sources":["C:/Users/crina/Documents/projects1/webproject/project/app/src/openai.js"],"sourcesContent":["\r\n//const OpenAI = require('openai');\r\nconst { OpenAIApi, Configuration } = require('openai');\r\nconst configuration = new Configuration({\r\n    apiKey: \"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\",\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n//const openai = new OpenAI({apiKey: \"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\", dangerouslyAllowBrowser:true});\r\n\r\n\r\n//sends a request to openAi server\r\n//receive the response and extract it.\r\nexport async function sendMessageToOpenAI(message){\r\n    try {\r\n        const response = await openai.createCompletion({\r\n            model: \"text-davinci-003\",\r\n            prompt: message,\r\n            max_tokens: 256,\r\n            top_p: 1,\r\n            frequency_penalty: 0,\r\n            presence_penalty: 0\r\n        });\r\n        return response.data.choices[0].text; //extracting only the text\r\n    }catch (error){\r\n        console.log(\"Error in SendMessageToOpenAi: \", error);\r\n        return null;\r\n    }\r\n}"],"mappings":"AACA;AACA,MAAM;EAAEA,SAAS;EAAEC;AAAc,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACtD,MAAMC,aAAa,GAAG,IAAIF,aAAa,CAAC;EACpCG,MAAM,EAAE;AACZ,CAAC,CAAC;AACF,MAAMC,MAAM,GAAG,IAAIL,SAAS,CAACG,aAAa,CAAC;AAC3C;;AAGA;AACA;AACA,OAAO,eAAeG,mBAAmBA,CAACC,OAAO,EAAC;EAC9C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAgB,CAAC;MAC3CC,KAAK,EAAE,kBAAkB;MACzBC,MAAM,EAAEJ,OAAO;MACfK,UAAU,EAAE,GAAG;MACfC,KAAK,EAAE,CAAC;MACRC,iBAAiB,EAAE,CAAC;MACpBC,gBAAgB,EAAE;IACtB,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC1C,CAAC,QAAOC,KAAK,EAAC;IACVC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEF,KAAK,CAAC;IACpD,OAAO,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}