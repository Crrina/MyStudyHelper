{"ast":null,"code":"import{useEffect,useState}from\"react\";import TypingAnimation from\"./TypingAnimation\";import axios from\"axios\";import{useLocation,useNavigate}from\"react-router-dom\";import{handleSessionExpired}from\"../utility/SessionExpiryHandler\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChatBox(_ref){let{apiUrl}=_ref;const[input,setInput]=useState(\"\");const[isLoading,setIsLoading]=useState(false);let accessToken=localStorage.getItem('accessToken');const location=useLocation();const navigate=useNavigate();const[chatLog,setChatLog]=useState(()=>{const savedChatLog=localStorage.getItem('chatLog');return savedChatLog?JSON.parse(savedChatLog):[];});useEffect(()=>{// save chatLog to localStorage whenever it changes\nlocalStorage.setItem('chatLog',JSON.stringify(chatLog));},[chatLog]);const handleSend=async event=>{event.preventDefault();setChatLog(prevChatLog=>[...prevChatLog,{type:'user',message:input,saved:false}]);const rest_api=apiUrl+\"/bot/chat?prompt=\"+input;setIsLoading(true);try{//my model is handled at the backend, as well as the key for security reasons\nconst response=await fetch(rest_api,{method:'GET',headers:{\"Content-Type\":\"application/json\"}});const responseText=await response.text();setChatLog(prevChatLog=>[...prevChatLog,{type:\"bot\",message:responseText}]);setIsLoading(false);setInput('');}catch(error){setIsLoading(false);console.error(\"Fetching error: \",error);}};const handleSaveMessage=async(message,index,event)=>{event.preventDefault();if(!accessToken){navigate('/login',{state:{from:location}});}else{try{const response=await axios.post(apiUrl+\"/note\",{content:message},{headers:{'Content-Type':'application/json','Authorization':\"Bearer \".concat(accessToken)// Include the token in the header\n}});if(response.status===200){setChatLog(prevChatLog=>{const newChatLog=[...prevChatLog];newChatLog[index]={...newChatLog[index],saved:true};return newChatLog;});}}catch(err){if(!(err!==null&&err!==void 0&&err.response)){console.log(\"No Server Response\");}else if((err===null||err===void 0?void 0:err.response.status)===401){console.log(\"Error message: \",err.response.data);handleSessionExpired(navigate);// Handle session expiry\n}else if((err===null||err===void 0?void 0:err.response.status)===403){console.log(\"Bad request\");}else{console.log(\"Failed to access source\");}}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"container-chat\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"chat-header\",children:\"ChatGPT\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[chatLog.map((message,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message \".concat(message.type),children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-bubble\",children:message.message}),message.type==='bot'&&/*#__PURE__*/_jsx(\"button\",{className:\"save-chat-convo \".concat(message.saved?'saved':''),onClick:event=>handleSaveMessage(message.message,index,event),disabled:message.saved// Disable the button if the message is saved\n,children:message.saved?'Saved':'Save'})]},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"typing-log\",children:/*#__PURE__*/_jsx(\"div\",{className:\"animation-log\",children:/*#__PURE__*/_jsx(TypingAnimation,{})})},chatLog.length)]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSend,className:\"chat-input-area\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"chat-input\",placeholder:\"Type your message...\",value:input,onChange:e=>setInput(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"send-button\",children:\"Send\"})]})]});}","map":{"version":3,"names":["useEffect","useState","TypingAnimation","axios","useLocation","useNavigate","handleSessionExpired","jsx","_jsx","jsxs","_jsxs","ChatBox","_ref","apiUrl","input","setInput","isLoading","setIsLoading","accessToken","localStorage","getItem","location","navigate","chatLog","setChatLog","savedChatLog","JSON","parse","setItem","stringify","handleSend","event","preventDefault","prevChatLog","type","message","saved","rest_api","response","fetch","method","headers","responseText","text","error","console","handleSaveMessage","index","state","from","post","content","concat","status","newChatLog","err","log","data","className","children","map","onClick","disabled","length","onSubmit","placeholder","value","onChange","e","target"],"sources":["C:/Users/crina/Documents/projects1/front_nn/app/src/components/ChatBox.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport TypingAnimation from \"./TypingAnimation\";\r\nimport axios from \"axios\";\r\nimport {useLocation, useNavigate} from \"react-router-dom\";\r\nimport {handleSessionExpired} from \"../utility/SessionExpiryHandler\";\r\n\r\n\r\nexport default function ChatBox({apiUrl}) {\r\n    const [input, setInput] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    let accessToken = localStorage.getItem('accessToken');\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const [chatLog, setChatLog] = useState(() => {\r\n        const savedChatLog = localStorage.getItem('chatLog');\r\n        return savedChatLog ? JSON.parse(savedChatLog) : [];\r\n    });\r\n\r\n    useEffect(() => {\r\n        // save chatLog to localStorage whenever it changes\r\n        localStorage.setItem('chatLog', JSON.stringify(chatLog));\r\n    }, [chatLog]);\r\n\r\n\r\n    const handleSend = async (event) => {\r\n        event.preventDefault();\r\n        setChatLog((prevChatLog) => [...prevChatLog, {type: 'user', message: input, saved: false}]);\r\n        const rest_api = apiUrl + \"/bot/chat?prompt=\" + input;\r\n        setIsLoading(true);\r\n        try {   //my model is handled at the backend, as well as the key for security reasons\r\n            const response = await fetch(rest_api, {\r\n                method: 'GET',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n            });\r\n            const responseText = await response.text()\r\n            setChatLog((prevChatLog) => [...prevChatLog, {type: \"bot\", message: responseText}])\r\n            setIsLoading(false);\r\n            setInput('');\r\n\r\n        } catch (error) {\r\n            setIsLoading(false)\r\n            console.error(\"Fetching error: \", error);\r\n        }\r\n\r\n    };\r\n\r\n\r\n    const handleSaveMessage = async (message, index, event) => {\r\n        event.preventDefault();\r\n        if (!accessToken) {\r\n            navigate('/login', {state: {from: location}});\r\n        } else {\r\n            try {\r\n                const response = await axios.post(apiUrl + \"/note\", {\r\n                    content: message\r\n                }, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${accessToken}` // Include the token in the header\r\n                    }\r\n                });\r\n                if (response.status === 200) {\r\n                    setChatLog(prevChatLog => {\r\n                        const newChatLog = [...prevChatLog];\r\n                        newChatLog[index] = {...newChatLog[index], saved: true};\r\n                        return newChatLog;\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                if (!err?.response) {\r\n                    console.log(\"No Server Response\");\r\n                } else if (err?.response.status === 401) {\r\n                    console.log(\"Error message: \", err.response.data);\r\n                    handleSessionExpired(navigate); // Handle session expiry\r\n                } else if (err?.response.status === 403) {\r\n                    console.log(\"Bad request\");\r\n                } else {\r\n                    console.log(\"Failed to access source\")\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container-chat\">\r\n            <header className=\"chat-header\">\r\n                ChatGPT\r\n            </header>\r\n            <div className=\"chat-messages\">\r\n                {chatLog.map((message, index) => (\r\n                    <div key={index} className={`message ${message.type}`}>\r\n                        <div className=\"message-bubble\">\r\n                            {message.message}\r\n                        </div>\r\n                        {message.type === 'bot' && (\r\n                            <button\r\n                                className={`save-chat-convo ${message.saved ? 'saved' : ''}`}\r\n                                onClick={(event) => handleSaveMessage(message.message, index, event)}\r\n                                disabled={message.saved} // Disable the button if the message is saved\r\n                            >\r\n                                {message.saved ? 'Saved' : 'Save'}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                ))}\r\n\r\n                {\r\n                    isLoading && <div key={chatLog.length} className=\"typing-log\">\r\n                        <div className=\"animation-log\">\r\n                            <TypingAnimation/>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <form onSubmit={handleSend} className=\"chat-input-area\">\r\n                <input\r\n                    className=\"chat-input\"\r\n                    placeholder=\"Type your message...\"\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                />\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    Send\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}