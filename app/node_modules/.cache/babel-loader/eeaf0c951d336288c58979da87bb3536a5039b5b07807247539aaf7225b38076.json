{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\crina\\\\Documents\\\\projects1\\\\webproject\\\\project\\\\app\\\\src\\\\components\\\\ChatBox.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBox() {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const handleSend = async event => {\n    event.preventDefault();\n    console.log(\"aaaa\");\n    const rest_api = \"http://localhost:8080/bot/chat?prompt=\" + input;\n    try {\n      const response = await fetch(rest_api, {\n        method: 'GET',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (response.ok) {\n        const res = await response.json(); // Parse the response as JSON\n        console.log(res); // 'res' is the JSON object\n        // Do something with 'res', like updating the state or displaying it in the UI\n      } else {\n        // Handle HTTP errors\n        console.log(\"HTTP Error: \" + response.status);\n      }\n    } catch (error) {\n      console.error(\"Fetching error: \", error);\n    }\n  };\n\n  //<!--the button has to be in the form, for onSubmit to be triggered by the button\n  //or the button can be outside the form, but then instead of having onSubmit={} we would have at the button onClick={handleSend}-->\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"titleNote\",\n        children: \"Text to bot :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSend,\n        className: \"note-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"note\",\n          name: \"note\",\n          rows: \"10\",\n          cols: \"50\",\n          value: input,\n          onChange: e => {\n            setInput(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"lll\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatBox, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n_c = ChatBox;\nvar _c;\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","ChatBox","_s","input","setInput","handleSend","event","preventDefault","console","log","rest_api","response","fetch","method","headers","ok","res","json","status","error","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","name","rows","cols","value","onChange","e","target","type","_c","$RefreshReg$"],"sources":["C:/Users/crina/Documents/projects1/webproject/project/app/src/components/ChatBox.js"],"sourcesContent":["import {useState} from \"react\";\r\n\r\n\r\nexport default function ChatBox(){\r\n\r\n    const [input, setInput] = useState(\"\");\r\n\r\n    const handleSend = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"aaaa\");\r\n        const rest_api = \"http://localhost:8080/bot/chat?prompt=\" + input;\r\n        try {\r\n            const response = await fetch(rest_api, {\r\n                method: 'GET',\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n            });\r\n\r\n            if(response.ok){\r\n                const res = await response.json(); // Parse the response as JSON\r\n                console.log(res); // 'res' is the JSON object\r\n                // Do something with 'res', like updating the state or displaying it in the UI\r\n            } else {\r\n                // Handle HTTP errors\r\n                console.log(\"HTTP Error: \" + response.status);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Fetching error: \", error);\r\n        }\r\n    };\r\n\r\n\r\n    //<!--the button has to be in the form, for onSubmit to be triggered by the button\r\n    //or the button can be outside the form, but then instead of having onSubmit={} we would have at the button onClick={handleSend}-->\r\n    return (\r\n        <div className=\"container\">\r\n            <div>\r\n                <h1 id=\"titleNote\">Text to bot :</h1>\r\n                <form onSubmit={handleSend} className=\"note-form\">\r\n                    <label htmlFor=\"note\"></label>\r\n                    <textarea id=\"note\" name=\"note\" rows=\"10\" cols=\"50\" value={input} onChange={(e) => {setInput(e.target.value)}}/>\r\n                    <button type=\"submit\">Send</button>\r\n                </form>\r\n            </div>\r\n            <div>\r\n                <p>lll</p>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/B,eAAe,SAASC,OAAOA,CAAA,EAAE;EAAAC,EAAA;EAE7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMO,UAAU,GAAG,MAAOC,KAAK,IAAK;IAChCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,MAAMC,QAAQ,GAAG,wCAAwC,GAAGP,KAAK;IACjE,IAAI;MACA,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,EAAE;QACnCG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB;MAChD,CAAC,CAAC;MAEF,IAAGH,QAAQ,CAACI,EAAE,EAAC;QACX,MAAMC,GAAG,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;QACnCT,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC,CAAC,CAAC;QAClB;MACJ,CAAC,MAAM;QACH;QACAR,OAAO,CAACC,GAAG,CAAC,cAAc,GAAGE,QAAQ,CAACO,MAAM,CAAC;MACjD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZX,OAAO,CAACW,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C;EACJ,CAAC;;EAGD;EACA;EACA,oBACInB,OAAA;IAAKoB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtBrB,OAAA;MAAAqB,QAAA,gBACIrB,OAAA;QAAIsB,EAAE,EAAC,WAAW;QAAAD,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrC1B,OAAA;QAAM2B,QAAQ,EAAEtB,UAAW;QAACe,SAAS,EAAC,WAAW;QAAAC,QAAA,gBAC7CrB,OAAA;UAAO4B,OAAO,EAAC;QAAM;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9B1B,OAAA;UAAUsB,EAAE,EAAC,MAAM;UAACO,IAAI,EAAC,MAAM;UAACC,IAAI,EAAC,IAAI;UAACC,IAAI,EAAC,IAAI;UAACC,KAAK,EAAE7B,KAAM;UAAC8B,QAAQ,EAAGC,CAAC,IAAK;YAAC9B,QAAQ,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UAAA;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eAChH1B,OAAA;UAAQoC,IAAI,EAAC,QAAQ;UAAAf,QAAA,EAAC;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN1B,OAAA;MAAAqB,QAAA,eACIrB,OAAA;QAAAqB,QAAA,EAAG;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAGd;AAACxB,EAAA,CA9CuBD,OAAO;AAAAoC,EAAA,GAAPpC,OAAO;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}